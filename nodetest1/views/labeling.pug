extends layout

block content
  h1 streaming: #{name}
  h4 Scheduled Stream Time: #{date}
  h4 Streaming to:
  each destination in streamFBDestinations
        a(href='https://www.facebook.com/913878858767085/videos/' + JSON.stringify(destination.id).slice(1, -1)) #{JSON.stringify(destination.name).slice(1, -1)} 
  p #{streamYTDestinations}
  each destination in streamSTVDestinations
    p #{destination.name}
  h4(id='timer')
    
  <head>
    <meta charset=utf-8 />

    <link href="https://unpkg.com/video.js@5.16.0/dist/video-js.css" rel="stylesheet">
    <script src="https://unpkg.com/video.js@5.16.0/dist/video.js"></script>
    <script src="https://unpkg.com/videojs-contrib-hls@4.1.1/dist/videojs-contrib-hls.js"></script>

    <link href="https://unpkg.com/video.js/dist/video-js.css" rel="stylesheet">
    <script src="https://unpkg.com/video.js/dist/video.js"></script>
    <script src="https://unpkg.com/videojs-contrib-hls/dist/videojs-contrib-hls.js"></script>
    
  </head>
    <body>

    video(id="my_video_1" class="video-js vjs-default-skin" controls preload="auto" width="640" height="268" data-setup='{}')
        source(src=input type="application/x-mpegURL")

    
    <script>
    </script>
    
    </body>
  br
  br
  h2 Make a trim
  form(action='/labeling/'+ name + '/trim_start', method='post', id='input')
      label(for='startTime') Give your trim a name
      br
      input(type='text', value='', name='name', id='trimName', placeholder='name')
      button(type="submit") Start recording
  form(action='/labeling/'+ name + '/trim_end', method='post', id='input')
      button(type="submit") Stop recording
  p Recording: #{inStreamEditName}
  h2 Labels
  h4(class='div-class' id='labels')
  br
  h2 Add a label 
  form(action='/labeling/' + name + '/add_label', method='post', id='insertLabelForm')
    label(for='insertLabel ') Add label
    input(type='text', value='', name='label', id='insertLabel')
    button(type="submit") submit
  br
  a(href="/editing/" + name)
    button(type="button" onclick='stopTimer()') #{terminate}
  br
  br
  h2 Your edited videos
    each video in trims
        h4 Trim: #{JSON.stringify(video.Video_trim.trimName).replace(/['"]+/g, '')}
        li Start Time: #{JSON.stringify(video.Video_trim.startTime).replace(/['"]+/g, '')}
        li End Time: #{JSON.stringify(video.Video_trim.endTime).replace(/['"]+/g, '')}
        video(id="my-video" class="video-js" controls preload="auto" width="640" height="264" data-setup="{}")
          source(src="/videos/cut-videos/" + name + "/"+ JSON.stringify(video.Video_trim.trimName).replace(/['"]+/g, '') + ".mp4" type='video/mp4')
          p(class="vjs-no-js")
          To view this video please enable JavaScript, and consider upgrading to a web browser that
          a(href="http://videojs.com/html5-video-support/" target="_blank">supports HTML5 video)
        form(action='/editing/'+ name +'/downloadTrim', method='post', id='input') 
            input(type='hidden', value=(JSON.stringify(video.Video_trim.trimName).replace(/['"]+/g, '')), name='trimName', id='trimName')
            button(type="submit") Download
        form(action='/labeling/'+ name +'/deleteTrim', method='post', id='input') 
            input(type='hidden', value=(JSON.stringify(video.Video_trim.trimName).replace(/['"]+/g, '')), name='deleteTrim', id='deleteTrim')
            input(type='hidden', value=(JSON.stringify(video._id).replace(/['"]+/g, '')), name='deleteTrimId', id='deleteTrimId')
            button(type="submit") Delete
  a(href="/")
    button(type="button") Home page

  script(src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.js')  
  script.
      $.get({ url: '/labels/refresh', 
              success: function(data){
                $("#labels").html("");  
                $.each(data,function(label) { // loop over result         
                  $("#labels").append(data[label].label + '<br/>');
               })
              },
              error: function(error) { console.log(error)} 
            })
    var countDownDate = localStorage.getItem('startDate');
    let counter = 0
    let resetTimer = function(){
      counter = + 1
      if(counter === 1){
        countDownDate = new Date(); localStorage.setItem('startDate', countDownDate);
      }
    }
    let stopTimer = function(){
      counter = 0
    }
    window.onload = resetTimer()
    if (countDownDate) {
        countDownDate = new Date(countDownDate);
    } else {
        countDownDate = new Date();
        localStorage.setItem('startDate', countDownDate);
    }

    // Update the count down every 1 second
    var x = setInterval(function() {

        // Get todays date and time
        var now = new Date().getTime();

        // Find the distance between now an the count down date
        var distance = now - countDownDate.getTime();

        // Time calculations for days, hours, minutes and seconds
        var days = Math.floor(distance / (1000 * 60 * 60 * 24));
        var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((distance % (1000 * 60)) / 1000);

        // Output the result in an element with id="demo"
        document.getElementById("timer").innerHTML = days + "d " + hours + "h " + minutes + "m " + seconds + "s ";
    }, 1000);
    

